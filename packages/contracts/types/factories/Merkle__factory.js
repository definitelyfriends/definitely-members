"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merkle__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]",
            },
            {
                internalType: "uint256",
                name: "node",
                type: "uint256",
            },
        ],
        name: "getProof",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]",
            },
        ],
        name: "getRoot",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "left",
                type: "bytes32",
            },
            {
                internalType: "bytes32",
                name: "right",
                type: "bytes32",
            },
        ],
        name: "hashLeafPairs",
        outputs: [
            {
                internalType: "bytes32",
                name: "_hash",
                type: "bytes32",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "x",
                type: "uint256",
            },
        ],
        name: "log2ceil",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "x",
                type: "uint256",
            },
        ],
        name: "log2ceilBitMagic",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "root",
                type: "bytes32",
            },
            {
                internalType: "bytes32[]",
                name: "proof",
                type: "bytes32[]",
            },
            {
                internalType: "bytes32",
                name: "valueToProve",
                type: "bytes32",
            },
        ],
        name: "verifyProof",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506108c7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e08d6021461006757806358161a421461008d578063b8616195146100b0578063cf06c7b7146100d0578063dd1d2599146100e3578063e27d5153146100f6575b600080fd5b61007a61007536600461072d565b610109565b6040519081526020015b60405180910390f35b6100a061009b36600461076a565b6101a9565b6040519015158152602001610084565b6100c36100be3660046107ba565b6101f3565b60405161008491906107ff565b61007a6100de366004610843565b610378565b61007a6100f136600461085c565b6104b5565b61007a610104366004610843565b6104e3565b6000600182511161016d5760405162461bcd60e51b815260206004820152602360248201527f776f6e27742067656e657261746520726f6f7420666f722073696e676c65206c60448201526232b0b360e91b60648201526084015b60405180910390fd5b600182511115610187576101808261050e565b915061016d565b8160008151811061019a5761019a61087e565b60200260200101519050919050565b81516000908290825b818110156101e7576101dd838783815181106101d0576101d061087e565b60200260200101516104b5565b92506001016101b2565b50509093149392505050565b606060018351116102525760405162461bcd60e51b8152602060048201526024808201527f776f6e27742067656e65726174652070726f6f6620666f722073696e676c65206044820152633632b0b360e11b6064820152608401610164565b600061025e8451610378565b67ffffffffffffffff8111156102765761027661067c565b60405190808252806020026020018201604052801561029f578160200160208202803683370190505b50905060005b60018551111561037057836001166001036102fa578460018503815181106102cf576102cf61087e565b60200260200101518282815181106102e9576102e961087e565b602002602001018181525050610357565b8451846001010361031b576000801b8282815181106102e9576102e961087e565b8484600101815181106103305761033061087e565b602002602001015182828151811061034a5761034a61087e565b6020026020010181815250505b6001016002840493506103698561050e565b94506102a5565b509392505050565b60006001821161038a57506000919050565b600082600160801b81106103ab57608093841c936103a89083610894565b91505b6801000000000000000084106103ce57604093841c936103cb9083610894565b91505b64010000000084106103ed57602093841c936103ea9083610894565b91505b62010000841061040a57601093841c936104079083610894565b91505b610100841061042657600893841c936104239083610894565b91505b6010841061044157600493841c9361043e9083610894565b91505b6004841061045c57600293841c936104599083610894565b91505b600284106104725761046f600183610894565b91505b60008161048181196001610894565b16905081811480156104935750600083115b156104a15750909392505050565b6104ac836001610894565b95945050505050565b600081831080156104cd5783600052826020526104d6565b82600052836020525b5050604060002092915050565b6000808219600101831683145b831561050657600193841c9391909101906104f0565b900392915050565b606080600083519050806001166001036105bd576002810460010167ffffffffffffffff8111156105415761054161067c565b60405190808252806020026020018201604052801561056a578160200160208202803683370190505b5091506105968460018303815181106105855761058561087e565b60200260200101516000801b6104b5565b826001845103815181106105ac576105ac61087e565b602002602001018181525050610606565b6002810467ffffffffffffffff8111156105d9576105d961067c565b604051908082528060200260200182016040528015610602578160200160208202803683370190505b5091505b6000805b600183038110156106725761064786828151811061062a5761062a61087e565b60200260200101518783600101815181106101d0576101d061087e565b8483815181106106595761065961087e565b602090810291909101015260019091019060020161060a565b5091949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106a357600080fd5b8135602067ffffffffffffffff808311156106c0576106c061067c565b8260051b604051601f19603f830116810181811084821117156106e5576106e561067c565b60405293845285810183019383810192508785111561070357600080fd5b83870191505b8482101561072257813583529183019190830190610709565b979650505050505050565b60006020828403121561073f57600080fd5b813567ffffffffffffffff81111561075657600080fd5b61076284828501610692565b949350505050565b60008060006060848603121561077f57600080fd5b83359250602084013567ffffffffffffffff81111561079d57600080fd5b6107a986828701610692565b925050604084013590509250925092565b600080604083850312156107cd57600080fd5b823567ffffffffffffffff8111156107e457600080fd5b6107f085828601610692565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b818110156108375783518352928401929184019160010161081b565b50909695505050505050565b60006020828403121561085557600080fd5b5035919050565b6000806040838503121561086f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600082198211156108b557634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c634300080f000a";
const isSuperArgs = (xs) => xs.length > 1;
class Merkle__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Merkle__factory = Merkle__factory;
Merkle__factory.bytecode = _bytecode;
Merkle__factory.abi = _abi;
