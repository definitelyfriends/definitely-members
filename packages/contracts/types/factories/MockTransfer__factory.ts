/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { MockTransfer, MockTransferInterface } from "../MockTransfer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "definitelyMemberships_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "definitelyMemberships",
    outputs: [
      {
        internalType: "contract IDefinitelyMemberships",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101c53803806101c583398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610132806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637d491b311461003b578063b7760c8f1461006a575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007d6100783660046100e9565b61007f565b005b60005460405163d454dfaf60e01b8152600481018490526001600160a01b0383811660248301529091169063d454dfaf90604401600060405180830381600087803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b505050505050565b600080604083850312156100fc57600080fd5b8235915060208301356001600160a01b038116811461011a57600080fd5b80915050925092905056fea164736f6c634300080f000a";

type MockTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTransfer__factory extends ContractFactory {
  constructor(...args: MockTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    definitelyMemberships_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockTransfer> {
    return super.deploy(
      definitelyMemberships_,
      overrides || {}
    ) as Promise<MockTransfer>;
  }
  override getDeployTransaction(
    definitelyMemberships_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(definitelyMemberships_, overrides || {});
  }
  override attach(address: string): MockTransfer {
    return super.attach(address) as MockTransfer;
  }
  override connect(signer: Signer): MockTransfer__factory {
    return super.connect(signer) as MockTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTransferInterface {
    return new utils.Interface(_abi) as MockTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTransfer {
    return new Contract(address, _abi, signerOrProvider) as MockTransfer;
  }
}
