/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DefinitelyMembershipsInterface extends utils.Interface {
  functions: {
    "addAddressToDenyList(address)": FunctionFragment;
    "addMembershipIssuingContract(address)": FunctionFragment;
    "addMembershipRevokingContract(address)": FunctionFragment;
    "addMembershipTransferContract(address)": FunctionFragment;
    "allowedMembershipIssuingContracts(address)": FunctionFragment;
    "allowedMembershipRevokingContracts(address)": FunctionFragment;
    "allowedMembershipTransferContracts(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "defaultMetadata()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isDefMember(address)": FunctionFragment;
    "isOnDenyList(address)": FunctionFragment;
    "issueMembership(address)": FunctionFragment;
    "memberSinceBlock(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextMembershipId()": FunctionFragment;
    "overrideMetadataForToken(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "removeAddressFromDenyList(address)": FunctionFragment;
    "removeMembershipIssuingContract(address)": FunctionFragment;
    "removeMembershipRevokingContract(address)": FunctionFragment;
    "removeMembershipTransferContract(address)": FunctionFragment;
    "resetMetadataForToken(uint256)": FunctionFragment;
    "revokeMembership(uint256,bool)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setDefaultMetadata(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenMetadataOverrideAddress(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferMembership(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAddressToDenyList"
      | "addMembershipIssuingContract"
      | "addMembershipRevokingContract"
      | "addMembershipTransferContract"
      | "allowedMembershipIssuingContracts"
      | "allowedMembershipRevokingContracts"
      | "allowedMembershipTransferContracts"
      | "approve"
      | "balanceOf"
      | "burn"
      | "defaultMetadata"
      | "getApproved"
      | "isApprovedForAll"
      | "isDefMember"
      | "isOnDenyList"
      | "issueMembership"
      | "memberSinceBlock"
      | "name"
      | "nextMembershipId"
      | "overrideMetadataForToken"
      | "owner"
      | "ownerOf"
      | "removeAddressFromDenyList"
      | "removeMembershipIssuingContract"
      | "removeMembershipRevokingContract"
      | "removeMembershipTransferContract"
      | "resetMetadataForToken"
      | "revokeMembership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setDefaultMetadata"
      | "setOwner"
      | "supportsInterface"
      | "symbol"
      | "tokenMetadataOverrideAddress"
      | "tokenURI"
      | "transferFrom"
      | "transferMembership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAddressToDenyList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembershipIssuingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembershipRevokingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembershipTransferContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedMembershipIssuingContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedMembershipRevokingContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedMembershipTransferContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnDenyList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueMembership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberSinceBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextMembershipId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "overrideMetadataForToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromDenyList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembershipIssuingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembershipRevokingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMembershipTransferContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMetadataForToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMembership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMetadata",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenMetadataOverrideAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMembership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAddressToDenyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMembershipIssuingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMembershipRevokingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMembershipTransferContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedMembershipIssuingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedMembershipRevokingContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedMembershipTransferContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOnDenyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberSinceBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMembershipId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "overrideMetadataForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromDenyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMembershipIssuingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMembershipRevokingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMembershipTransferContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMetadataForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadataOverrideAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMembership",
    data: BytesLike
  ): Result;

  events: {
    "AddedToDenyList(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DefaultMetadataUpdated(address)": EventFragment;
    "DefinitelyShipping()": EventFragment;
    "MembershipIssued(uint256,address)": EventFragment;
    "MembershipIssuingContractAdded(address)": EventFragment;
    "MembershipIssuingContractRemoved(address)": EventFragment;
    "MembershipRevoked(uint256,address)": EventFragment;
    "MembershipRevokingContractAdded(address)": EventFragment;
    "MembershipRevokingContractRemoved(address)": EventFragment;
    "MembershipTransferContractAdded(address)": EventFragment;
    "MembershipTransferContractRemoved(address)": EventFragment;
    "MetadataOverridden(uint256,address)": EventFragment;
    "MetadataResetToDefault(uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "RemovedFromDenyList(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToDenyList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultMetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefinitelyShipping"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipIssued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipIssuingContractAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipIssuingContractRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MembershipRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipRevokingContractAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipRevokingContractRemoved"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipTransferContractAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MembershipTransferContractRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataOverridden"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataResetToDefault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromDenyList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AddedToDenyListEventObject {
  account: string;
}
export type AddedToDenyListEvent = TypedEvent<
  [string],
  AddedToDenyListEventObject
>;

export type AddedToDenyListEventFilter = TypedEventFilter<AddedToDenyListEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DefaultMetadataUpdatedEventObject {
  metadata: string;
}
export type DefaultMetadataUpdatedEvent = TypedEvent<
  [string],
  DefaultMetadataUpdatedEventObject
>;

export type DefaultMetadataUpdatedEventFilter =
  TypedEventFilter<DefaultMetadataUpdatedEvent>;

export interface DefinitelyShippingEventObject {}
export type DefinitelyShippingEvent = TypedEvent<
  [],
  DefinitelyShippingEventObject
>;

export type DefinitelyShippingEventFilter =
  TypedEventFilter<DefinitelyShippingEvent>;

export interface MembershipIssuedEventObject {
  tokenId: BigNumber;
  newOwner: string;
}
export type MembershipIssuedEvent = TypedEvent<
  [BigNumber, string],
  MembershipIssuedEventObject
>;

export type MembershipIssuedEventFilter =
  TypedEventFilter<MembershipIssuedEvent>;

export interface MembershipIssuingContractAddedEventObject {
  contractAddress: string;
}
export type MembershipIssuingContractAddedEvent = TypedEvent<
  [string],
  MembershipIssuingContractAddedEventObject
>;

export type MembershipIssuingContractAddedEventFilter =
  TypedEventFilter<MembershipIssuingContractAddedEvent>;

export interface MembershipIssuingContractRemovedEventObject {
  contractAddress: string;
}
export type MembershipIssuingContractRemovedEvent = TypedEvent<
  [string],
  MembershipIssuingContractRemovedEventObject
>;

export type MembershipIssuingContractRemovedEventFilter =
  TypedEventFilter<MembershipIssuingContractRemovedEvent>;

export interface MembershipRevokedEventObject {
  tokenId: BigNumber;
  prevOwner: string;
}
export type MembershipRevokedEvent = TypedEvent<
  [BigNumber, string],
  MembershipRevokedEventObject
>;

export type MembershipRevokedEventFilter =
  TypedEventFilter<MembershipRevokedEvent>;

export interface MembershipRevokingContractAddedEventObject {
  contractAddress: string;
}
export type MembershipRevokingContractAddedEvent = TypedEvent<
  [string],
  MembershipRevokingContractAddedEventObject
>;

export type MembershipRevokingContractAddedEventFilter =
  TypedEventFilter<MembershipRevokingContractAddedEvent>;

export interface MembershipRevokingContractRemovedEventObject {
  contractAddress: string;
}
export type MembershipRevokingContractRemovedEvent = TypedEvent<
  [string],
  MembershipRevokingContractRemovedEventObject
>;

export type MembershipRevokingContractRemovedEventFilter =
  TypedEventFilter<MembershipRevokingContractRemovedEvent>;

export interface MembershipTransferContractAddedEventObject {
  contractAddress: string;
}
export type MembershipTransferContractAddedEvent = TypedEvent<
  [string],
  MembershipTransferContractAddedEventObject
>;

export type MembershipTransferContractAddedEventFilter =
  TypedEventFilter<MembershipTransferContractAddedEvent>;

export interface MembershipTransferContractRemovedEventObject {
  contractAddress: string;
}
export type MembershipTransferContractRemovedEvent = TypedEvent<
  [string],
  MembershipTransferContractRemovedEventObject
>;

export type MembershipTransferContractRemovedEventFilter =
  TypedEventFilter<MembershipTransferContractRemovedEvent>;

export interface MetadataOverriddenEventObject {
  tokenId: BigNumber;
  metadata: string;
}
export type MetadataOverriddenEvent = TypedEvent<
  [BigNumber, string],
  MetadataOverriddenEventObject
>;

export type MetadataOverriddenEventFilter =
  TypedEventFilter<MetadataOverriddenEvent>;

export interface MetadataResetToDefaultEventObject {
  tokenId: BigNumber;
}
export type MetadataResetToDefaultEvent = TypedEvent<
  [BigNumber],
  MetadataResetToDefaultEventObject
>;

export type MetadataResetToDefaultEventFilter =
  TypedEventFilter<MetadataResetToDefaultEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface RemovedFromDenyListEventObject {
  account: string;
}
export type RemovedFromDenyListEvent = TypedEvent<
  [string],
  RemovedFromDenyListEventObject
>;

export type RemovedFromDenyListEventFilter =
  TypedEventFilter<RemovedFromDenyListEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DefinitelyMemberships extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefinitelyMembershipsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAddressToDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedMembershipIssuingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedMembershipRevokingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedMembershipTransferContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultMetadata(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDefMember(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOnDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueMembership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberSinceBlock(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextMembershipId(overrides?: CallOverrides): Promise<[BigNumber]>;

    overrideMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    removeAddressFromDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeMembership(
      id: PromiseOrValue<BigNumberish>,
      addToDenyList: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultMetadata(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenMetadataOverrideAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferMembership(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAddressToDenyList(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMembershipIssuingContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMembershipRevokingContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMembershipTransferContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedMembershipIssuingContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedMembershipRevokingContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedMembershipTransferContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultMetadata(overrides?: CallOverrides): Promise<string>;

  getApproved(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDefMember(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOnDenyList(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueMembership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberSinceBlock(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextMembershipId(overrides?: CallOverrides): Promise<BigNumber>;

  overrideMetadataForToken(
    tokenId: PromiseOrValue<BigNumberish>,
    metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAddressFromDenyList(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMembershipIssuingContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMembershipRevokingContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMembershipTransferContract(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetMetadataForToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeMembership(
    id: PromiseOrValue<BigNumberish>,
    addToDenyList: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultMetadata(
    contractAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenMetadataOverrideAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferMembership(
    id: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAddressToDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedMembershipIssuingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedMembershipRevokingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedMembershipTransferContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultMetadata(overrides?: CallOverrides): Promise<string>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDefMember(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOnDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueMembership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    memberSinceBlock(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextMembershipId(overrides?: CallOverrides): Promise<BigNumber>;

    overrideMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAddressFromDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMembership(
      id: PromiseOrValue<BigNumberish>,
      addToDenyList: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultMetadata(
      contractAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenMetadataOverrideAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMembership(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToDenyList(address)"(
      account?: PromiseOrValue<string> | null
    ): AddedToDenyListEventFilter;
    AddedToDenyList(
      account?: PromiseOrValue<string> | null
    ): AddedToDenyListEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "DefaultMetadataUpdated(address)"(
      metadata?: PromiseOrValue<string> | null
    ): DefaultMetadataUpdatedEventFilter;
    DefaultMetadataUpdated(
      metadata?: PromiseOrValue<string> | null
    ): DefaultMetadataUpdatedEventFilter;

    "DefinitelyShipping()"(): DefinitelyShippingEventFilter;
    DefinitelyShipping(): DefinitelyShippingEventFilter;

    "MembershipIssued(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MembershipIssuedEventFilter;
    MembershipIssued(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newOwner?: PromiseOrValue<string> | null
    ): MembershipIssuedEventFilter;

    "MembershipIssuingContractAdded(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipIssuingContractAddedEventFilter;
    MembershipIssuingContractAdded(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipIssuingContractAddedEventFilter;

    "MembershipIssuingContractRemoved(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipIssuingContractRemovedEventFilter;
    MembershipIssuingContractRemoved(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipIssuingContractRemovedEventFilter;

    "MembershipRevoked(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prevOwner?: null
    ): MembershipRevokedEventFilter;
    MembershipRevoked(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prevOwner?: null
    ): MembershipRevokedEventFilter;

    "MembershipRevokingContractAdded(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipRevokingContractAddedEventFilter;
    MembershipRevokingContractAdded(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipRevokingContractAddedEventFilter;

    "MembershipRevokingContractRemoved(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipRevokingContractRemovedEventFilter;
    MembershipRevokingContractRemoved(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipRevokingContractRemovedEventFilter;

    "MembershipTransferContractAdded(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipTransferContractAddedEventFilter;
    MembershipTransferContractAdded(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipTransferContractAddedEventFilter;

    "MembershipTransferContractRemoved(address)"(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipTransferContractRemovedEventFilter;
    MembershipTransferContractRemoved(
      contractAddress?: PromiseOrValue<string> | null
    ): MembershipTransferContractRemovedEventFilter;

    "MetadataOverridden(uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): MetadataOverriddenEventFilter;
    MetadataOverridden(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): MetadataOverriddenEventFilter;

    "MetadataResetToDefault(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MetadataResetToDefaultEventFilter;
    MetadataResetToDefault(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MetadataResetToDefaultEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "RemovedFromDenyList(address)"(
      account?: PromiseOrValue<string> | null
    ): RemovedFromDenyListEventFilter;
    RemovedFromDenyList(
      account?: PromiseOrValue<string> | null
    ): RemovedFromDenyListEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addAddressToDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedMembershipIssuingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedMembershipRevokingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedMembershipTransferContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDefMember(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOnDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueMembership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberSinceBlock(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextMembershipId(overrides?: CallOverrides): Promise<BigNumber>;

    overrideMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAddressFromDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeMembership(
      id: PromiseOrValue<BigNumberish>,
      addToDenyList: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultMetadata(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenMetadataOverrideAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferMembership(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAddressToDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedMembershipIssuingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedMembershipRevokingContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedMembershipTransferContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDefMember(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOnDenyList(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueMembership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberSinceBlock(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMembershipId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overrideMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAddressFromDenyList(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMembershipIssuingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMembershipRevokingContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMembershipTransferContract(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetMetadataForToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeMembership(
      id: PromiseOrValue<BigNumberish>,
      addToDenyList: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultMetadata(
      contractAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenMetadataOverrideAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferMembership(
      id: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
