/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DefinitelySoulboundRecoveryInterface extends utils.Interface {
  functions: {
    "definitelyMemberships()": FunctionFragment;
    "newProposal(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposals(address)": FunctionFragment;
    "recoverMembership(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "vote(address,bool)": FunctionFragment;
    "votingConfig()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "definitelyMemberships"
      | "newProposal"
      | "owner"
      | "proposals"
      | "recoverMembership"
      | "setOwner"
      | "vote"
      | "votingConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "definitelyMemberships",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverMembership",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "definitelyMemberships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingConfig",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
    "ProposalApproved(uint256,address,address)": EventFragment;
    "ProposalCancelled(uint256,address,address)": EventFragment;
    "ProposalCreated(uint256,address,address)": EventFragment;
    "ProposalDenied(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalDenied"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface ProposalApprovedEventObject {
  tokenId: BigNumber;
  owner: string;
  to: string;
}
export type ProposalApprovedEvent = TypedEvent<
  [BigNumber, string, string],
  ProposalApprovedEventObject
>;

export type ProposalApprovedEventFilter =
  TypedEventFilter<ProposalApprovedEvent>;

export interface ProposalCancelledEventObject {
  tokenId: BigNumber;
  owner: string;
  to: string;
}
export type ProposalCancelledEvent = TypedEvent<
  [BigNumber, string, string],
  ProposalCancelledEventObject
>;

export type ProposalCancelledEventFilter =
  TypedEventFilter<ProposalCancelledEvent>;

export interface ProposalCreatedEventObject {
  tokenId: BigNumber;
  owner: string;
  to: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalDeniedEventObject {
  tokenId: BigNumber;
  owner: string;
  to: string;
}
export type ProposalDeniedEvent = TypedEvent<
  [BigNumber, string, string],
  ProposalDeniedEventObject
>;

export type ProposalDeniedEventFilter = TypedEventFilter<ProposalDeniedEvent>;

export interface DefinitelySoulboundRecovery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefinitelySoulboundRecoveryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    definitelyMemberships(overrides?: CallOverrides): Promise<[string]>;

    newProposal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { tokenId: BigNumber; approvalCount: number }
    >;

    recoverMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      newOwner: PromiseOrValue<string>,
      inFavor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minQuorum: BigNumber; maxVotes: BigNumber }
    >;
  };

  definitelyMemberships(overrides?: CallOverrides): Promise<string>;

  newProposal(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { tokenId: BigNumber; approvalCount: number }
  >;

  recoverMembership(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    newOwner: PromiseOrValue<string>,
    inFavor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minQuorum: BigNumber; maxVotes: BigNumber }
  >;

  callStatic: {
    definitelyMemberships(overrides?: CallOverrides): Promise<string>;

    newProposal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { tokenId: BigNumber; approvalCount: number }
    >;

    recoverMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      newOwner: PromiseOrValue<string>,
      inFavor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { minQuorum: BigNumber; maxVotes: BigNumber }
    >;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "ProposalApproved(uint256,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalApprovedEventFilter;
    ProposalApproved(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalApprovedEventFilter;

    "ProposalCancelled(uint256,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalCancelledEventFilter;
    ProposalCancelled(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalCancelledEventFilter;

    "ProposalCreated(uint256,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalCreatedEventFilter;

    "ProposalDenied(uint256,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalDeniedEventFilter;
    ProposalDenied(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: null,
      to?: null
    ): ProposalDeniedEventFilter;
  };

  estimateGas: {
    definitelyMemberships(overrides?: CallOverrides): Promise<BigNumber>;

    newProposal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      newOwner: PromiseOrValue<string>,
      inFavor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingConfig(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    definitelyMemberships(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newProposal(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverMembership(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      newOwner: PromiseOrValue<string>,
      inFavor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
